"""
    Owlery API

    Owlery provides a web API for an [OWL API](http://owlapi.sourceforge.net)-based reasoner containing a configurable set of ontologies (a \"knowledgebase\").   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: balhoff@renci.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from owlery_client.api_client import ApiClient, Endpoint as _Endpoint
from owlery_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from owlery_client.model.inline_response200 import InlineResponse200


class DLQueriesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __kbs_kb_equivalent_get(
            self,
            kb,
            object,
            **kwargs
        ):
            """Equivalent classes  # noqa: E501

            Get equivalent classes of a named class or class expression  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.kbs_kb_equivalent_get(kb, object, async_req=True)
            >>> result = thread.get()

            Args:
                kb (str): label for a knowledgebase in this Owlery
                object (str): Manchester-syntax OWL class expression

            Keyword Args:
                prefixes (str): JSON format prefix map, used to expand prefixes in the 'object' expression. [optional]
                direct (bool): [optional] if omitted the server will use the default value of True
                include_deprecated (bool): Include `owl:deprecated` terms in the result. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kb'] = \
                kb
            kwargs['object'] = \
                object
            return self.call_with_http_info(**kwargs)

        self.kbs_kb_equivalent_get = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/kbs/{kb}/equivalent',
                'operation_id': 'kbs_kb_equivalent_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kb',
                    'object',
                    'prefixes',
                    'direct',
                    'include_deprecated',
                ],
                'required': [
                    'kb',
                    'object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kb':
                        (str,),
                    'object':
                        (str,),
                    'prefixes':
                        (str,),
                    'direct':
                        (bool,),
                    'include_deprecated':
                        (bool,),
                },
                'attribute_map': {
                    'kb': 'kb',
                    'object': 'object',
                    'prefixes': 'prefixes',
                    'direct': 'direct',
                    'include_deprecated': 'includeDeprecated',
                },
                'location_map': {
                    'kb': 'path',
                    'object': 'query',
                    'prefixes': 'query',
                    'direct': 'query',
                    'include_deprecated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__kbs_kb_equivalent_get
        )

        def __kbs_kb_instances_get(
            self,
            kb,
            object,
            **kwargs
        ):
            """Instances  # noqa: E501

            Get instances of a named class or class expression  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.kbs_kb_instances_get(kb, object, async_req=True)
            >>> result = thread.get()

            Args:
                kb (str): label for a knowledgebase in this Owlery
                object (str): Manchester-syntax OWL class expression

            Keyword Args:
                prefixes (str): JSON format prefix map. [optional]
                direct (bool): [optional] if omitted the server will use the default value of True
                include_deprecated (bool): Include `owl:deprecated` terms in the result. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kb'] = \
                kb
            kwargs['object'] = \
                object
            return self.call_with_http_info(**kwargs)

        self.kbs_kb_instances_get = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [],
                'endpoint_path': '/kbs/{kb}/instances',
                'operation_id': 'kbs_kb_instances_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kb',
                    'object',
                    'prefixes',
                    'direct',
                    'include_deprecated',
                ],
                'required': [
                    'kb',
                    'object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kb':
                        (str,),
                    'object':
                        (str,),
                    'prefixes':
                        (str,),
                    'direct':
                        (bool,),
                    'include_deprecated':
                        (bool,),
                },
                'attribute_map': {
                    'kb': 'kb',
                    'object': 'object',
                    'prefixes': 'prefixes',
                    'direct': 'direct',
                    'include_deprecated': 'includeDeprecated',
                },
                'location_map': {
                    'kb': 'path',
                    'object': 'query',
                    'prefixes': 'query',
                    'direct': 'query',
                    'include_deprecated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__kbs_kb_instances_get
        )

        def __kbs_kb_satisfiable_get(
            self,
            kb,
            object,
            **kwargs
        ):
            """Satisfiability  # noqa: E501

            Returns whether the given named class or expression is satisfiable  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.kbs_kb_satisfiable_get(kb, object, async_req=True)
            >>> result = thread.get()

            Args:
                kb (str): label for a knowledgebase in this Owlery
                object (str): Manchester-syntax OWL class expression

            Keyword Args:
                prefixes (str): JSON format prefix map, used to expand prefixes in the 'object' expression. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kb'] = \
                kb
            kwargs['object'] = \
                object
            return self.call_with_http_info(**kwargs)

        self.kbs_kb_satisfiable_get = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/kbs/{kb}/satisfiable',
                'operation_id': 'kbs_kb_satisfiable_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kb',
                    'object',
                    'prefixes',
                ],
                'required': [
                    'kb',
                    'object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kb':
                        (str,),
                    'object':
                        (str,),
                    'prefixes':
                        (str,),
                },
                'attribute_map': {
                    'kb': 'kb',
                    'object': 'object',
                    'prefixes': 'prefixes',
                },
                'location_map': {
                    'kb': 'path',
                    'object': 'query',
                    'prefixes': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__kbs_kb_satisfiable_get
        )

        def __kbs_kb_subclasses_get(
            self,
            kb,
            object,
            **kwargs
        ):
            """Subclasses  # noqa: E501

            Get subclasses of a named class or class expression  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.kbs_kb_subclasses_get(kb, object, async_req=True)
            >>> result = thread.get()

            Args:
                kb (str): label for a knowledgebase in this Owlery
                object (str): Manchester-syntax OWL class expression

            Keyword Args:
                prefixes (str): JSON format prefix map, used to expand prefixes in the 'object' expression. [optional]
                direct (bool): [optional] if omitted the server will use the default value of True
                include_equivalent (bool): Also query for equivalent classes. [optional] if omitted the server will use the default value of False
                include_nothing (bool): owl:Nothing is filtered by default because it is by definition a subclass of everything.. [optional] if omitted the server will use the default value of False
                include_deprecated (bool): Include `owl:deprecated` terms in the result. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kb'] = \
                kb
            kwargs['object'] = \
                object
            return self.call_with_http_info(**kwargs)

        self.kbs_kb_subclasses_get = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/kbs/{kb}/subclasses',
                'operation_id': 'kbs_kb_subclasses_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kb',
                    'object',
                    'prefixes',
                    'direct',
                    'include_equivalent',
                    'include_nothing',
                    'include_deprecated',
                ],
                'required': [
                    'kb',
                    'object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kb':
                        (str,),
                    'object':
                        (str,),
                    'prefixes':
                        (str,),
                    'direct':
                        (bool,),
                    'include_equivalent':
                        (bool,),
                    'include_nothing':
                        (bool,),
                    'include_deprecated':
                        (bool,),
                },
                'attribute_map': {
                    'kb': 'kb',
                    'object': 'object',
                    'prefixes': 'prefixes',
                    'direct': 'direct',
                    'include_equivalent': 'includeEquivalent',
                    'include_nothing': 'includeNothing',
                    'include_deprecated': 'includeDeprecated',
                },
                'location_map': {
                    'kb': 'path',
                    'object': 'query',
                    'prefixes': 'query',
                    'direct': 'query',
                    'include_equivalent': 'query',
                    'include_nothing': 'query',
                    'include_deprecated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__kbs_kb_subclasses_get
        )

        def __kbs_kb_superclasses_get(
            self,
            kb,
            object,
            **kwargs
        ):
            """Superclasses  # noqa: E501

            Get superclasses of a named class or class expression  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.kbs_kb_superclasses_get(kb, object, async_req=True)
            >>> result = thread.get()

            Args:
                kb (str): label for a knowledgebase in this Owlery
                object (str): Manchester-syntax OWL class expression

            Keyword Args:
                prefixes (str): JSON format prefix map, used to expand prefixes in the 'object' expression. [optional]
                direct (bool): [optional] if omitted the server will use the default value of True
                include_equivalent (bool): Also query for equivalent classes. [optional] if omitted the server will use the default value of False
                include_thing (bool): owl:Thing is filtered by default because it is by definition a superclass of everything.. [optional] if omitted the server will use the default value of False
                include_deprecated (bool): Include `owl:deprecated` terms in the result. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kb'] = \
                kb
            kwargs['object'] = \
                object
            return self.call_with_http_info(**kwargs)

        self.kbs_kb_superclasses_get = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/kbs/{kb}/superclasses',
                'operation_id': 'kbs_kb_superclasses_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kb',
                    'object',
                    'prefixes',
                    'direct',
                    'include_equivalent',
                    'include_thing',
                    'include_deprecated',
                ],
                'required': [
                    'kb',
                    'object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kb':
                        (str,),
                    'object':
                        (str,),
                    'prefixes':
                        (str,),
                    'direct':
                        (bool,),
                    'include_equivalent':
                        (bool,),
                    'include_thing':
                        (bool,),
                    'include_deprecated':
                        (bool,),
                },
                'attribute_map': {
                    'kb': 'kb',
                    'object': 'object',
                    'prefixes': 'prefixes',
                    'direct': 'direct',
                    'include_equivalent': 'includeEquivalent',
                    'include_thing': 'includeThing',
                    'include_deprecated': 'includeDeprecated',
                },
                'location_map': {
                    'kb': 'path',
                    'object': 'query',
                    'prefixes': 'query',
                    'direct': 'query',
                    'include_equivalent': 'query',
                    'include_thing': 'query',
                    'include_deprecated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__kbs_kb_superclasses_get
        )

        def __kbs_kb_types_get(
            self,
            kb,
            object,
            **kwargs
        ):
            """Types  # noqa: E501

            Get types of a named individual  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.kbs_kb_types_get(kb, object, async_req=True)
            >>> result = thread.get()

            Args:
                kb (str): label for a knowledgebase in this Owlery
                object (str): Individual IRI

            Keyword Args:
                prefixes (str): JSON format prefix map. [optional]
                direct (bool): [optional] if omitted the server will use the default value of True
                include_thing (bool): owl:Thing is filtered by default because it is by definition a type of everything.. [optional] if omitted the server will use the default value of False
                include_deprecated (bool): Include `owl:deprecated` terms in the result. [optional] if omitted the server will use the default value of True
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str, none_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['kb'] = \
                kb
            kwargs['object'] = \
                object
            return self.call_with_http_info(**kwargs)

        self.kbs_kb_types_get = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/kbs/{kb}/types',
                'operation_id': 'kbs_kb_types_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'kb',
                    'object',
                    'prefixes',
                    'direct',
                    'include_thing',
                    'include_deprecated',
                ],
                'required': [
                    'kb',
                    'object',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'kb':
                        (str,),
                    'object':
                        (str,),
                    'prefixes':
                        (str,),
                    'direct':
                        (bool,),
                    'include_thing':
                        (bool,),
                    'include_deprecated':
                        (bool,),
                },
                'attribute_map': {
                    'kb': 'kb',
                    'object': 'object',
                    'prefixes': 'prefixes',
                    'direct': 'direct',
                    'include_thing': 'includeThing',
                    'include_deprecated': 'includeDeprecated',
                },
                'location_map': {
                    'kb': 'path',
                    'object': 'query',
                    'prefixes': 'query',
                    'direct': 'query',
                    'include_thing': 'query',
                    'include_deprecated': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__kbs_kb_types_get
        )
